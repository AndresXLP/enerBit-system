// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/infra/grpc/proto/meter.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeterServiceClient is the client API for MeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeterServiceClient interface {
	Create(ctx context.Context, in *CreateMeterReq, opts ...grpc.CallOption) (*CreateMeterResp, error)
}

type meterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeterServiceClient(cc grpc.ClientConnInterface) MeterServiceClient {
	return &meterServiceClient{cc}
}

func (c *meterServiceClient) Create(ctx context.Context, in *CreateMeterReq, opts ...grpc.CallOption) (*CreateMeterResp, error) {
	out := new(CreateMeterResp)
	err := c.cc.Invoke(ctx, "/proto.MeterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeterServiceServer is the server API for MeterService service.
// All implementations must embed UnimplementedMeterServiceServer
// for forward compatibility
type MeterServiceServer interface {
	Create(context.Context, *CreateMeterReq) (*CreateMeterResp, error)
	mustEmbedUnimplementedMeterServiceServer()
}

// UnimplementedMeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeterServiceServer struct {
}

func (UnimplementedMeterServiceServer) Create(context.Context, *CreateMeterReq) (*CreateMeterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMeterServiceServer) mustEmbedUnimplementedMeterServiceServer() {}

// UnsafeMeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeterServiceServer will
// result in compilation errors.
type UnsafeMeterServiceServer interface {
	mustEmbedUnimplementedMeterServiceServer()
}

func RegisterMeterServiceServer(s grpc.ServiceRegistrar, srv MeterServiceServer) {
	s.RegisterService(&MeterService_ServiceDesc, srv)
}

func _MeterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterServiceServer).Create(ctx, req.(*CreateMeterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MeterService_ServiceDesc is the grpc.ServiceDesc for MeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MeterService",
	HandlerType: (*MeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MeterService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infra/grpc/proto/meter.proto",
}
